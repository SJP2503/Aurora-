name: Aurora Pipeline â€“ PR-based Data Updates

on:
  schedule:
    - cron: '0 1 * * *'   # daily at 01:00 UTC
  workflow_dispatch:       # manual Run workflow button

# Token scopes for PR-based updates
permissions:
  contents: write
  pull-requests: write

jobs:
  scrape-and-pr:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      # 2) Prep folders
      - name: Prepare folders
        run: |
          mkdir -p data/input data/coa data/procurement data/comelec data/courts data/dbm saln_meta tools

      # 3) R setup + deps
      - name: Set up R
        uses: r-lib/actions/setup-r@v2

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::rvest
            any::dplyr
            any::stringr
            any::janitor
            any::readr
            any::purrr
            any::jsonlite
            any::digest
            any::httr
            any::lubridate
          needs: |
            R/fetch_ph_legislators.R
            R/fetch_saln_metadata.R
            R/fetch_pnp_data.R
            R/coa_findings.R
            R/philgeps_awards.R
            R/comelec_soce.R
            R/court_cases.R
            R/dbm_releases.R

      # 4) Python setup (risk emitter)
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install requests pydantic

      # 5) Run all scrapers
      - name: Run legislator scraper (House + Senate)
        run: Rscript R/fetch_ph_legislators.R

      - name: Build SALN metadata
        run: Rscript R/fetch_saln_metadata.R

      - name: Run PNP scraper
        run: Rscript R/fetch_pnp_data.R

      - name: Run COA findings scraper
        run: Rscript R/coa_findings.R

      - name: Run PhilGEPS awards normalizer
        run: Rscript R/philgeps_awards.R

      - name: Run COMELEC SOCE normalizer
        run: Rscript R/comelec_soce.R

      - name: Run Courts case extractor
        run: Rscript R/court_cases.R

      - name: Run DBM releases normalizer
        run: Rscript R/dbm_releases.R

      # 6) Emit risk events (safe if API secrets aren't set)
      - name: Emit risk events to Aurora
        env:
          AURORA_API_URL: ${{ secrets.AURORA_API_URL }}
          AURORA_API_TOKEN: ${{ secrets.AURORA_API_TOKEN }}
        run: |
          python tools/emit_risk.py || echo "[emit_risk] skipping (no API configured)"

      # 7) Create/refresh a PR with updated data (no direct push required)
      - name: Create pull request with data updates
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "[auto] Update data (Legislators/SALN/PNP/COA/PhilGEPS/COMELEC/Courts/DBM)"
          branch: data/auto-update
          title: "Automated data update"
          body: |
            This PR contains automated data updates produced by the Aurora pipeline.
            Review diffs and merge when ready.
          labels: data-update, automated
          add-paths: |
            data/**
            saln_meta/**

      # 8) Debug info on failure
      - name: Session info on failure
        if: failure()
        run: |
          Rscript -e 'sessionInfo()'
          echo "--- repo tree ---"
          ls -R
